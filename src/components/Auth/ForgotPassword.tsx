// src/components/Auth/ForgotPassword.tsx (Phi√™n b·∫£n ƒë√£ c·∫≠p nh·∫≠t)
import React, { useState, useEffect } from "react";
import { X, Loader2, CheckCircle } from "lucide-react";
// Lo·∫°i b·ªè import toast
import { useAuthStore } from "../../stores/authStore"; 

interface ForgotPasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSwitchToLogin: () => void;
}

// üí° Component Popup Th√¥ng b√°o Th√†nh c√¥ng T√πy ch·ªânh
interface SuccessPopupProps {
    onClose: () => void;
    onSwitchToLogin: () => void;
}

const SuccessPopup: React.FC<SuccessPopupProps> = ({ onClose, onSwitchToLogin }) => {
    return (
        <div className="p-6 text-center">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-gray-900 mb-2">Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i!</h3>
            <p className="text-gray-600 mb-6">
                Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ email c·ªßa b·∫°n (bao g·ªìm c·∫£ th∆∞ m·ª•c Spam) ƒë·ªÉ nh·∫≠n li√™n k·∫øt kh√¥i ph·ª•c m·∫≠t kh·∫©u.
            </p>
            <button
                onClick={onSwitchToLogin}
                className="w-full rounded-lg bg-rose-600 py-3 font-semibold text-white shadow-md transition duration-200 hover:bg-rose-700"
            >
                Quay l·∫°i ƒêƒÉng nh·∫≠p
            </button>
            <button
                onClick={onClose}
                className="mt-3 w-full text-sm font-medium text-gray-500 transition hover:text-gray-700 hover:underline"
            >
                ƒê√≥ng
            </button>
        </div>
    );
};

const ForgotPasswordModal: React.FC<ForgotPasswordModalProps> = ({
  isOpen,
  onClose,
  onSwitchToLogin,
}) => {
  const [email, setEmail] = useState("");
  // üëà TH√äM STATE ƒê·ªÇ HI·ªÇN TH·ªä POPUP TH√ÄNH C√îNG
  const [showSuccessPopup, setShowSuccessPopup] = useState(false);
  
  const { 
    forgotPassword, 
    forgotPasswordLoading: loading, 
    forgotPasswordError: requestError,
  } = useAuthStore(); 

  // H√†m ƒë√≥ng modal ch√≠nh v√† reset state
  const handleCloseModal = () => {
    onClose();
    setEmail("");
    setShowSuccessPopup(false);
    // L∆∞u √Ω: N·∫øu c√≥ h√†m clearForgotPasswordError trong store, n√™n g·ªçi ·ªü ƒë√¢y.
  };

  if (!isOpen) {
    return null;
  }

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const success = await forgotPassword(email);

    if (success) {
        // üí° Thay th·∫ø toast b·∫±ng vi·ªác hi·ªÉn th·ªã popup t√πy ch·ªânh
        setShowSuccessPopup(true);
    }
  };

  // N·∫øu popup th√†nh c√¥ng ƒëang hi·ªÉn th·ªã, ch√∫ng ta s·∫Ω render n√≥ thay v√¨ form
  const ModalContent = showSuccessPopup ? (
    <SuccessPopup 
        onClose={handleCloseModal} 
        onSwitchToLogin={() => {
            handleCloseModal(); // ƒê√≥ng Forgot Password Modal
            onSwitchToLogin(); // M·ªü Login Modal
        }} 
    />
  ) : (
    <>
      <button
        onClick={handleCloseModal} // S·ª≠ d·ª•ng h√†m ƒë√≥ng m·ªõi
        className="absolute right-4 top-4 rounded-full p-2 text-gray-400 transition hover:bg-gray-100 hover:text-gray-600"
        aria-label="ƒê√≥ng"
      >
        <X className="h-5 w-5" />
      </button>

      <div className="mb-6 text-center">
        <h2 className="text-base font-extrabold text-gray-900 lg:text-xl">
          Qu√™n M·∫≠t Kh·∫©u
        </h2>
        <p className="mt-1 text-sm text-gray-500">
          Nh·∫≠p ƒë·ªãa ch·ªâ email ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u c·ªßa b·∫°n.
        </p>
      </div>

      <form className="space-y-5" onSubmit={handleResetPassword}>
        <div>
          <label
            htmlFor="reset-email"
            className="mb-1 block text-sm font-medium text-gray-700"
          >
            Email c·ªßa b·∫°n
          </label>
          <input
            type="email"
            id="reset-email"
            name="email"
            placeholder="Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω"
            value={email}
            onChange={(e) => {
              setEmail(e.target.value);
              // clearForgotPasswordError(); 
            }}
            className="w-full rounded-lg border border-gray-300 p-3 text-gray-900 transition focus:border-rose-500 focus:ring-1 focus:ring-rose-500"
            required
          />
        </div>

        {/* Hi·ªÉn th·ªã l·ªói t·ª´ store */}
        {requestError && (
          <div className="rounded-lg bg-red-50 p-3">
            <p className="text-sm font-medium text-red-600">‚ö†Ô∏è {requestError}</p>
          </div>
        )}

        <button
          type="submit"
          className="flex w-full items-center justify-center rounded-lg bg-rose-600 py-3 font-semibold text-white shadow-md transition duration-200 hover:bg-rose-700 disabled:cursor-not-allowed disabled:bg-rose-400"
          disabled={loading}
        >
          {loading ? (
            <>
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
              ƒêang g·ª≠i y√™u c·∫ßu...
            </>
          ) : (
            "G·ª≠i Y√™u C·∫ßu Kh√¥i Ph·ª•c"
          )}
        </button>
      </form>
      
      <div className="mt-6 text-center">
        <button
          onClick={onSwitchToLogin}
          className="text-sm font-medium text-gray-500 transition hover:text-gray-700 hover:underline"
        >
          Quay l·∫°i ƒêƒÉng nh·∫≠p
        </button>
      </div>
    </>
  );

  return (
    <div
      className="fixed inset-0 z-[60] flex items-center justify-center bg-gray-900/40 backdrop-blur-sm transition-opacity duration-300"
      onClick={handleCloseModal}
    >
      <div
        className={`hover:shadow-3xl relative w-11/12 max-w-md transform rounded-lg bg-white p-8 shadow-2xl transition-all duration-500 
            ${showSuccessPopup ? 'max-w-sm' : ''} `} // Gi·∫£m k√≠ch th∆∞·ªõc modal n·∫øu l√† popup th√†nh c√¥ng
        onClick={(e) => e.stopPropagation()}
      >
        {ModalContent}
      </div>
    </div>
  );
};

export default ForgotPasswordModal;